1) DFS - Recursive Solution

class Solution {
public:
    int traverse(TreeNode* root, int currNum){
        if(!root) return 0;
        currNum = currNum*10 + root->val;
        if(!root->left && !root->right) return currNum;
        return traverse(root->left, currNum) + traverse(root->right, currNum);
    }
    int sumNumbers(TreeNode* root) {
        return traverse(root, 0);
    }   
};

2) DFS - Iterative Solution

class Solution {
public:
    int sumNumbers(TreeNode* root) {
        stack<pair<TreeNode*, int>> st;
        st.push({root, 0});
        int sum = 0;
        while(st.empty() == false){
            auto [root, curr] = st.top();
            st.pop();
            curr = curr*10 + root->val;
            if(!root->left && !root->right) sum += curr;
            if(root->left) st.push({root->left, curr});
            if(root->right) st.push({root->right, curr});
        }
        return sum;
    }
};